#+options: tex:verbatim
#+TITLE: Results for Bethge attack


* General
#+NAME: init_block
#+BEGIN_SRC python :noweb yes
  import numpy as np
  import glob

  from lib.parse_logs import parse_output_logs, output_org_results

  test_params = []
#+END_SRC

#+RESULTS: init_block
: None

#+NAME: output_results
#+BEGIN_SRC python :noweb yes
  dirs = glob.glob(f"./results/{dataset}_bethge*")
  df = parse_output_logs(dirs,
                         norm,
                         type,
                         export_test_params=test_params,
                         allowed_thresholds=thresholds)
  df = df[getattr(df, f"acc_{norm}") == 0]
  df_org = output_org_results([df], norm, summarize=False, topk=100)
#+END_SRC

#+RESULTS: output_results

* Mnist
** L0
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l0" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = [5, 8, 10, 15]
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l0" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l0" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(5, 45, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L1
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l1" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l1" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2.5, 12.5, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l1" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(5, 20, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l2" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.5, 2.5, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l2" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(1.0, 3.0, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="l2" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(1.0, 3.0, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="li" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.03, 0.11, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="li" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = [0.2, 0.25, 0.3, 0.325, 0.35]
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="mnist" :var norm="li" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.05, 0.25, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* Cifar10
** L0
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l0" :var type="plain" :results value :return df_org
  <<init_block>>
  test_params = ['attack_l0_pixel_metric']
  thresholds = [5, 8, 10, 15]
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l0" :var type="linf" :results value :return df_org
  <<init_block>>
  test_params = ['attack_l0_pixel_metric']
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l0" :var type="l2" :results value :return df_org
  <<init_block>>
  test_params = ['attack_l0_pixel_metric']
  thresholds = np.linspace(5, 45, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L1
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l1" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l1" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(5, 20, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l1" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(3, 15, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l2" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = [0.1, 0.15, 0.2, 0.3, 0.4]
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l2" :var type="linf" :results output :return df_org
  <<init_block>>
  thresholds = np.linspace(0.25, 1.25, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="l2" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(1.0, 3.0, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
*** Plain
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="li" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.03, 0.11, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

*** Linf
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="li" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = [0.2, 0.25, 0.3, 0.325, 0.35]
  <<output_results>>
#+END_SRC

#+RESULTS:

*** L2
#+BEGIN_SRC python :noweb yes :var dataset="cifar10" :var norm="li" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.05, 0.25, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* COMMENT Local Variables
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
