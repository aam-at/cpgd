#+options: tex:verbatim
#+TITLE: Results on MNIST dataset

* General
#+NAME: init_script
#+BEGIN_SRC python
  import numpy as np
  from lib.parse_results import parse_results, output_excel
  from functools import partial

  base_dir = "../results_mnist"
  parse_results = partial(parse_results, base_dir=base_dir)
  output_excel = partial(output_excel, base_dir=base_dir)
#+END_SRC

* Init
#+NAME: init_block_random
#+BEGIN_SRC python :noweb yes
  <<parse_results>>
  def parse_output_logs(paths, norm, type):
      if not isinstance(paths, (list, tuple)):
          paths = list(paths)
      df_sublist = []
      for p in paths:
          p = Path(p)
          df = parse_test_optimizer_log(p / f"test_random_{type}_{norm}" / "mnist")
          df_sublist.append(df)
      df = pd.concat(df_sublist, ignore_index=True)
      df = df.sort_values('entropy', ascending=False)
      return df
#+END_SRC

#+NAME: output_results_init
#+BEGIN_SRC python :noweb yes
  dirs = glob.glob("./results/mnist*")
  df = parse_output_logs(dirs, norm, type)
  df_org = output_org_results([df], norm, summarize=False, topk=100)
#+END_SRC

** Plain
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="plain" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="linf" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

** L2
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="l2" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

* Li
** DF attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "li", "df", sort_column="li_corr")
      output_excel(df, model_type, "li", "df")
#+END_SRC

** Bethge attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "li", "bethge", sort_column="li_corr")
      output_excel(df, model_type, "li", "bethge")
#+END_SRC

** DAA attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "li", "daa", sort_column="acc_adv", group_by="attack_eps")
      output_excel(df, model_type, "li", "daa", group_by="attack_eps")
#+END_SRC

** PGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "li", "pgd", sort_column="acc_adv", group_by="attack_eps")
      output_excel(df, model_type, "li", "pgd", group_by="attack_eps")
#+END_SRC

** Fab attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "li", "fab")
      output_excel(df, model_type, "li", "fab")
#+END_SRC

** PDPGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "li", "our_li", group_by="attack_loop_number_restarts")
      output_excel(df, model_type, "li", "our_li", group_by="attack_loop_number_restarts")
#+END_SRC

* L2
** DF attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l2", "df")
      output_excel(df, model_type, "l2", "df")
#+END_SRC

** CW attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l2", "cw")
      output_excel(df, model_type, "l2", "cw")
#+END_SRC

** DDN attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l2", "ddn")
      output_excel(df, model_type, "l2", "ddn")
#+END_SRC

** Bethge attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l2", "bethge")
      output_excel(df, model_type, "l2", "bethge")
#+END_SRC

** PGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l2", "pgd", sort_column="acc_adv", group_by="attack_eps")
      output_excel(df, model_type, "l2", "pgd", group_by="attack_eps")
#+END_SRC

** FAB attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l2", "fab")
      output_excel(df, model_type, "l2", "fab")
#+END_SRC

** PDGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l2", "our_l2", group_by="attack_loop_number_restarts")
      output_excel(df, model_type, "l2", "our_l2", group_by="attack_loop_number_restarts")
#+END_SRC

* L1
** Sparesfool attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l1", "sparsefool")
      output_excel(df, model_type, "l1", "sparsefool")
#+END_SRC

** EAD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l1", "ead")
      output_excel(df, model_type, "l1", "ead")
#+END_SRC

** Bethge attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l1", "bethge")
      output_excel(df, model_type, "l1", "bethge")
#+END_SRC

** PGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l1", "pgd", sort_column="acc_adv", group_by="attack_eps")
      output_excel(df, model_type, "l1", "pgd", group_by="attack_eps")
#+END_SRC

** FAB attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l1", "fab")
      output_excel(df, model_type, "l1", "fab")
#+END_SRC

** PDPGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l1", "our_l1", group_by="attack_loop_number_restarts")
      output_excel(df, model_type, "l1", "our_l1", group_by="attack_loop_number_restarts")
#+END_SRC

* L0
** Sparesfool attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l1", "sparsefool", sort_column="l0_corr")
      output_excel(df, model_type, "l0", "sparsefool")
#+END_SRC
** JSMA attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l0", "jsma")
      output_excel(df, model_type, "l0", "jsma")
#+END_SRC

** Pixel attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l0", "one_pixel")
      output_excel(df, model_type, "l0", "one_pixel")
#+END_SRC

** Bethge attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l0", "bethge")
      output_excel(df, model_type, "l0", "bethge")
#+END_SRC

** Cornersearch attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l0", "cornersearch")
      output_excel(df, model_type, "l0", "cornersearch")
#+END_SRC

** PGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l0", "pgd", sort_column="acc_adv", group_by="attack_eps")
      output_excel(df, model_type, "l0", "pgd", group_by="attack_eps")
#+END_SRC
** PDPGD attack
#+BEGIN_SRC python :async :noweb yes :results output :tangle yes
  <<init_script>>
  for model_type in ["plain", "linf", "l2"]:
      df = parse_results(model_type, "l0", "our_l0", group_by="attack_loop_number_restarts")
      output_excel(df, model_type, "l0", "our_l0", group_by="attack_loop_number_restarts")
#+END_SRC

* COMMENT Local Variables
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
