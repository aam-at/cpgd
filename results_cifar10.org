#+options: tex:verbatim
#+TITLE: Results on cifar10 dataset

* General
#+NAME: init_block
#+BEGIN_SRC python
  import numpy as np
  import pandas as pd
  from pathlib import Path
  import re
  import glob

  from lib.parse_logs import parse_test_optimizer_log, org_group_and_summarize, org_table


  def get_unique_name(name):
      try:
          unique_name = re.findall(".+(?=_.+)", name)[0]
      except:
          unique_name = re.findall(".+(?=\d+)", name)[0]
      parts = name.split("_")
      unique_name = "_".join(parts[4:13])
      return unique_name


  def parse_output_logs(paths, norm, type, allowed_thresholds=None):
      if not isinstance(paths, (list, tuple)):
          paths = list(paths)
      if allowed_thresholds is None:
          allowed_thresholds = []

      df_sublist = []
      for p in paths:
          p = Path(p)
          df = parse_test_optimizer_log(p / f"test_{type}_{norm}" / "cifar10",
                                        exclude=['nll_loss', 'conf'])
          df_sublist.append(df)
      df = pd.concat(df_sublist, ignore_index=True)
      if len(allowed_thresholds) > 0:
          for col in df.columns:
              if col.startswith(f"acc_{norm}_"):
                  if col not in [
                          f"acc_{norm}_{th:.3f}" for th in allowed_thresholds
                  ]:
                      df = df.drop(columns=[col])
      df = df.sort_values(norm, ascending=True)
      return df


  def output_org_results(logs, norm, summarize=False, topk=100):
      if summarize:
          logs = pd.concat(logs, ignore_index=True)
          logs_org = org_group_and_summarize(logs,
                                             group_by=get_unique_name,
                                             sort_groups=True,
                                             sort_keys=norm)
      else:
          logs_org = []
          first = True
          for log in logs:
              if first:
                  if topk is not None:
                      logs_org.extend(org_table(log)[:3 + topk] + [None])
                  else:
                      logs_org.extend(org_table(log))
                      first = False
              else:
                  if topk is not None:
                      logs_org.extend(org_table(log)[3:topk + 3] + [None])
                  else:
                      logs_org.extend(org_table(log)[3:])
      return logs_org
#+END_SRC

#+RESULTS: init_block
: None

#+NAME: output_results
#+BEGIN_SRC python :noweb yes
  dirs = glob.glob("./results/cifar10*")
  df = parse_output_logs(dirs, norm, type, allowed_thresholds=thresholds)
  df = df[getattr(df, f"acc_{norm}") == 0]
  df_org = output_org_results([df], norm, summarize=False, topk=100)
#+END_SRC

#+RESULTS: output_results

* All
#+BEGIN_SRC python :noweb yes :results value :return df_org
  <<init_block>>
  logs = []
  for norm, type in itertools.product(['l0', 'l1', 'l2', 'li'], ['plain', 'linf', 'l2']):
      if norm != 'l1':
          continue
      df = parse_output_logs(["./results/cifar10_6"],
                          norm,
                          type,
                          allowed_thresholds=None)
      df = df[getattr(df, f"acc_{norm}") == 0]
      df = df[getattr(df, f"conf_{norm}") > 0]
      df = df[df.name.str.contains("100_10k")]
      df['lp'] = df[norm]
      logs.append(df)
  df_org = output_org_results(logs, 'lp', summarize=True)
#+END_SRC

#+RESULTS:

* Init
#+NAME: init_block_random
#+BEGIN_SRC python :noweb yes
  <<init_block>>
  def parse_output_logs(paths, norm, type):
      if not isinstance(paths, (list, tuple)):
          paths = list(paths)
      df_sublist = []
      for p in paths:
          p = Path(p)
          df = parse_test_optimizer_log(p / f"test_random_{type}_{norm}" / "cifar10")
          df_sublist.append(df)
      df = pd.concat(df_sublist, ignore_index=True)
      df = df.sort_values('entropy', ascending=False)
      return df
#+END_SRC

#+RESULTS: init_block_random
: None

#+NAME: output_results_init
#+BEGIN_SRC python :noweb yes
  dirs = glob.glob("./results/cifar10*")
  df = parse_output_logs(dirs, norm, type)
  df_org = output_org_results([df], norm, summarize=False, topk=100)
#+END_SRC

#+RESULTS: output_results_init

** Plain
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="plain" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

#+RESULTS:
|-----------------------------------+----------|
| name                              |  entropy |
|-----------------------------------+----------|
| cifar10_plain_N100_uniform_0.25_0 | 0.583797 |
| cifar10_plain_N100_uniform_0.2_0  | 0.580105 |
| cifar10_plain_N100_sign_0.15_0    | 0.573916 |
| cifar10_plain_N100_sign_0.1_0     | 0.559848 |
| cifar10_plain_N100_uniform_0.3_0  | 0.549546 |
| cifar10_plain_N100_uniform_0.15_0 |  0.52837 |
| cifar10_plain_N100_uniform_0.35_0 | 0.492507 |
| cifar10_plain_N100_sign_0.2_0     | 0.485201 |
| cifar10_plain_N100_uniform_0.4_0  | 0.426997 |
| cifar10_plain_N100_uniform_0.1_0  | 0.414899 |
| cifar10_plain_N100_sign_0.05_0    | 0.374817 |
| cifar10_plain_N100_sign_0.25_0    | 0.368437 |
| cifar10_plain_N100_uniform_0.45_0 | 0.363402 |
| cifar10_plain_N100_uniform_0.5_0  | 0.309578 |
| cifar10_plain_N100_sign_0.3_0     | 0.276976 |
| cifar10_plain_N100_uniform_0.55_0 | 0.265326 |
| cifar10_plain_N100_uniform_0.05_0 | 0.243613 |
| cifar10_plain_N100_uniform_0.6_0  | 0.231089 |
| cifar10_plain_N100_sign_0.35_0    | 0.216495 |
| cifar10_plain_N100_uniform_0.65_0 | 0.204933 |
| cifar10_plain_N100_uniform_0.7_0  | 0.185646 |
| cifar10_plain_N100_sign_0.4_0     | 0.181948 |
| cifar10_plain_N100_uniform_0.75_0 |  0.17184 |
| cifar10_plain_N100_sign_0.45_0    | 0.162416 |
| cifar10_plain_N100_uniform_0.8_0  | 0.161117 |
| cifar10_plain_N100_uniform_0.85_0 | 0.154495 |
| cifar10_plain_N100_sign_0.5_0     | 0.150787 |
| cifar10_plain_N100_uniform_0.9_0  | 0.149353 |
| cifar10_plain_N100_uniform_0.95_0 | 0.145637 |
| cifar10_plain_N100_sign_0.55_0    | 0.143297 |
| cifar10_plain_N100_uniform_1.0_0  | 0.142941 |
| cifar10_plain_N100_sign_0.6_0     | 0.138251 |
| cifar10_plain_N100_sign_0.65_0    | 0.134136 |
| cifar10_plain_N100_sign_0.7_0     | 0.130856 |
| cifar10_plain_N100_sign_0.75_0    | 0.128423 |
| cifar10_plain_N100_sign_0.8_0     | 0.126607 |
| cifar10_plain_N100_sign_0.85_0    | 0.125505 |
| cifar10_plain_N100_sign_0.9_0     | 0.124676 |
| cifar10_plain_N100_sign_0.95_0    | 0.124283 |
| cifar10_plain_N100_sign_1.0_0     | 0.124183 |
| cifar10_plain_N100_uniform_0.0_0  |      0.0 |
| cifar10_plain_N100_sign_0.0_0     |      0.0 |
|-----------------------------------+----------|
|-----------------------------------+----------|

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="linf" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

#+RESULTS:
|----------------------------------+----------|
| name                             |  entropy |
|----------------------------------+----------|
| cifar10_linf_N100_uniform_0.4_0  | 0.394875 |
| cifar10_linf_N100_uniform_0.35_0 | 0.394839 |
| cifar10_linf_N100_sign_0.2_0     | 0.392526 |
| cifar10_linf_N100_sign_0.25_0    | 0.381669 |
| cifar10_linf_N100_uniform_0.3_0  | 0.378934 |
| cifar10_linf_N100_uniform_0.45_0 | 0.377246 |
| cifar10_linf_N100_sign_0.15_0    | 0.352482 |
| cifar10_linf_N100_uniform_0.25_0 |  0.34435 |
| cifar10_linf_N100_uniform_0.5_0  | 0.343174 |
| cifar10_linf_N100_sign_0.3_0     | 0.317892 |
| cifar10_linf_N100_uniform_0.55_0 | 0.301035 |
| cifar10_linf_N100_uniform_0.2_0  | 0.290646 |
| cifar10_linf_N100_uniform_0.6_0  | 0.258896 |
| cifar10_linf_N100_sign_0.1_0     | 0.256092 |
| cifar10_linf_N100_sign_0.35_0    | 0.238596 |
| cifar10_linf_N100_uniform_0.15_0 | 0.225118 |
| cifar10_linf_N100_uniform_0.65_0 | 0.220009 |
| cifar10_linf_N100_uniform_0.7_0  | 0.185248 |
| cifar10_linf_N100_sign_0.4_0     | 0.164787 |
| cifar10_linf_N100_uniform_0.75_0 | 0.154519 |
| cifar10_linf_N100_uniform_0.1_0  | 0.152267 |
| cifar10_linf_N100_sign_0.05_0    | 0.133418 |
| cifar10_linf_N100_uniform_0.8_0  | 0.129312 |
| cifar10_linf_N100_sign_0.45_0    | 0.110436 |
| cifar10_linf_N100_uniform_0.85_0 | 0.109105 |
| cifar10_linf_N100_uniform_0.9_0  | 0.093048 |
| cifar10_linf_N100_uniform_0.95_0 | 0.081094 |
| cifar10_linf_N100_uniform_0.05_0 | 0.079388 |
| cifar10_linf_N100_sign_0.5_0     |  0.07715 |
| cifar10_linf_N100_uniform_1.0_0  | 0.072298 |
| cifar10_linf_N100_sign_1.0_0     | 0.067849 |
| cifar10_linf_N100_sign_0.95_0    | 0.067797 |
| cifar10_linf_N100_sign_0.9_0     | 0.067479 |
| cifar10_linf_N100_sign_0.85_0    | 0.066759 |
| cifar10_linf_N100_sign_0.8_0     |  0.06537 |
| cifar10_linf_N100_sign_0.75_0    | 0.063105 |
| cifar10_linf_N100_sign_0.55_0    | 0.061344 |
| cifar10_linf_N100_sign_0.7_0     | 0.060249 |
| cifar10_linf_N100_sign_0.65_0    | 0.057424 |
| cifar10_linf_N100_sign_0.6_0     | 0.056658 |
| cifar10_linf_N100_uniform_0.0_0  |      0.0 |
| cifar10_linf_N100_sign_0.0_0     |      0.0 |
|----------------------------------+----------|
|----------------------------------+----------|

** L2
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="l2" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

#+RESULTS:
|--------------------------------+----------|
| name                           |  entropy |
|--------------------------------+----------|
| cifar10_l2_N100_uniform_0.4_0  | 0.418115 |
| cifar10_l2_N100_uniform_0.35_0 | 0.412734 |
| cifar10_l2_N100_sign_0.2_0     |  0.41089 |
| cifar10_l2_N100_sign_0.25_0    |  0.40208 |
| cifar10_l2_N100_uniform_0.45_0 |  0.39904 |
| cifar10_l2_N100_uniform_0.3_0  |  0.39182 |
| cifar10_l2_N100_sign_0.15_0    | 0.363906 |
| cifar10_l2_N100_uniform_0.5_0  | 0.363871 |
| cifar10_l2_N100_uniform_0.25_0 | 0.356102 |
| cifar10_l2_N100_sign_0.3_0     | 0.334307 |
| cifar10_l2_N100_uniform_0.55_0 | 0.321334 |
| cifar10_l2_N100_uniform_0.2_0  | 0.300778 |
| cifar10_l2_N100_uniform_0.6_0  |  0.28098 |
| cifar10_l2_N100_sign_0.1_0     |  0.26646 |
| cifar10_l2_N100_sign_0.35_0    |  0.25999 |
| cifar10_l2_N100_uniform_0.65_0 |  0.24661 |
| cifar10_l2_N100_uniform_0.15_0 | 0.235828 |
| cifar10_l2_N100_uniform_0.7_0  | 0.217717 |
| cifar10_l2_N100_sign_0.4_0     | 0.204048 |
| cifar10_l2_N100_uniform_0.75_0 | 0.195793 |
| cifar10_l2_N100_uniform_0.8_0  | 0.179823 |
| cifar10_l2_N100_sign_0.45_0    | 0.169929 |
| cifar10_l2_N100_uniform_0.85_0 | 0.168491 |
| cifar10_l2_N100_uniform_0.1_0  | 0.163616 |
| cifar10_l2_N100_uniform_0.9_0  | 0.160294 |
| cifar10_l2_N100_uniform_0.95_0 | 0.154212 |
| cifar10_l2_N100_sign_0.5_0     | 0.152484 |
| cifar10_l2_N100_uniform_1.0_0  | 0.149057 |
| cifar10_l2_N100_sign_0.55_0    | 0.144398 |
| cifar10_l2_N100_sign_0.05_0    | 0.143346 |
| cifar10_l2_N100_sign_0.8_0     | 0.142772 |
| cifar10_l2_N100_sign_0.75_0    | 0.142738 |
| cifar10_l2_N100_sign_0.85_0    | 0.142541 |
| cifar10_l2_N100_sign_0.7_0     | 0.141953 |
| cifar10_l2_N100_sign_0.9_0     | 0.141764 |
| cifar10_l2_N100_sign_0.65_0    | 0.141332 |
| cifar10_l2_N100_sign_0.6_0     | 0.141307 |
| cifar10_l2_N100_sign_0.95_0    | 0.141082 |
| cifar10_l2_N100_sign_1.0_0     | 0.140897 |
| cifar10_l2_N100_uniform_0.05_0 | 0.085368 |
| cifar10_l2_N100_uniform_0.0_0  |      0.0 |
| cifar10_l2_N100_sign_0.0_0     |      0.0 |
|--------------------------------+----------|
|--------------------------------+----------|

* L0
** Plain
#+BEGIN_SRC python :noweb yes :var norm="l0" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = [5, 8, 10, 15]
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l0" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="l0" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(5, 45, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* L1
** Plain
#+BEGIN_SRC python :noweb yes :var norm="l1" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l1" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2.5, 12.5, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="l1" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(5, 20, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* L2
** Plain
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = [0.1, 0.15, 0.2, 0.3, 0.4]
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(1.0, 3.0, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(1.0, 3.0, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* Linf
** Plain
#+BEGIN_SRC python :noweb yes :var norm="li" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = [1.0] #np.linspace(0.03, 0.11, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="li" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = [1.0] #np.round(np.linspace(2, 10, 5) / 255, 3)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="li" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.05, 0.25, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* COMMENT Local Variables
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
