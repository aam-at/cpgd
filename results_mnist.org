#+options: tex:verbatim
#+TITLE: Results on mnist dataset

* General
#+NAME: init_block
#+BEGIN_SRC python
  import numpy as np
  import pandas as pd
  from pathlib import Path
  import re
  import glob

  from lib.parse_logs import parse_test_optimizer_log, org_group_and_summarize, org_table


  def get_unique_name(name):
      try:
          unique_name = re.findall(".+(?=_.+)", name)[0]
      except:
          unique_name = re.findall(".+(?=\d+)", name)[0]
      unique_name = unique_name[unique_name.find("_") + 1:]
      unique_name = unique_name[unique_name.find("_") + 1:]
      unique_name = unique_name[unique_name.find("_") + 1:]
      # unique_name = unique_name[unique_name.find("_") + 1:]
      return unique_name


  def parse_output_logs(paths, norm, type, allowed_thresholds=None):
      if not isinstance(paths, (list, tuple)):
          paths = list(paths)
      if allowed_thresholds is None:
          allowed_thresholds = []

      df_sublist = []
      for p in paths:
          p = Path(p)
          df = parse_test_optimizer_log(p / f"test_{type}_{norm}" / "mnist",
                                        exclude=['nll_loss', 'conf'])
          df_sublist.append(df)
      df = pd.concat(df_sublist, ignore_index=True)
      if len(allowed_thresholds) > 0:
          for col in df.columns:
              if col.startswith(f"acc_{norm}_"):
                  if col not in [
                          f"acc_{norm}_{th:.2f}" for th in allowed_thresholds
                  ]:
                      df = df.drop(columns=[col])
      df = df.sort_values(norm, ascending=True)
      return df


  def output_org_results(logs, norm, summarize=False, topk=100):
      if summarize:
          logs = pd.concat(logs, ignore_index=True)
          logs_org = org_group_and_summarize(logs,
                                             group_by=get_unique_name,
                                             sort_groups=True,
                                             sort_keys=norm)
      else:
          logs_org = []
          first = True
          for log in logs:
              if first:
                  if topk is not None:
                      logs_org.extend(org_table(log)[:3 + topk] + [None])
                  else:
                      logs_org.extend(org_table(log))
                      first = False
              else:
                  if topk is not None:
                      logs_org.extend(org_table(log)[3:topk + 3] + [None])
                  else:
                      logs_org.extend(org_table(log)[3:])
      return logs_org
#+END_SRC

#+RESULTS: init_block
: None

#+NAME: output_results
#+BEGIN_SRC python :noweb yes
  dirs = glob.glob("./results/mnist*")
  df = parse_output_logs(dirs, norm, type, allowed_thresholds=thresholds)
  df = df[getattr(df, f"acc_{norm}") == 0]
  df_org = output_org_results([df], norm, summarize=False, topk=100)
#+END_SRC

#+RESULTS: output_results

* Init
#+NAME: init_block_random
#+BEGIN_SRC python :noweb yes
  <<init_block>>
  def parse_output_logs(paths, norm, type):
      if not isinstance(paths, (list, tuple)):
          paths = list(paths)
      df_sublist = []
      for p in paths:
          p = Path(p)
          df = parse_test_optimizer_log(p / f"test_random_{type}_{norm}" / "mnist")
          df_sublist.append(df)
      df = pd.concat(df_sublist, ignore_index=True)
      df = df.sort_values('entropy', ascending=False)
      return df
#+END_SRC

#+RESULTS: init_block_random
: None

#+NAME: output_results_init
#+BEGIN_SRC python :noweb yes
  dirs = glob.glob("./results/mnist*")
  df = parse_output_logs(dirs, norm, type)
  df_org = output_org_results([df], norm, summarize=False, topk=100)
#+END_SRC

#+RESULTS: output_results_init

** Plain
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="plain" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

#+RESULTS:
|--------------------------------+----------|
| name                           |  entropy |
|--------------------------------+----------|
| mnist_plain_sign_0.95_0        | 1.600762 |
| mnist_plain_sign_0.9_0         | 1.597526 |
| mnist_plain_sign_1.0_0         | 1.595283 |
| mnist_plain_sign_0.85_0        | 1.583155 |
| mnist_plain_sign_0.8_0         | 1.558004 |
| mnist_plain_sign_0.75_0        | 1.521427 |
| mnist_plain_sign_0.7_0         | 1.474186 |
| mnist_plain_sign_0.65_0        | 1.417487 |
| mnist_plain_uniform_1.0_0      |  1.37717 |
| mnist_plain_sign_0.6_0         | 1.351456 |
| mnist_plain_uniform_0.95_0     | 1.332887 |
| mnist_plain_N10_sign_0.95_0    | 1.314966 |
| mnist_plain_N10_sign_0.9_0     | 1.314075 |
| mnist_plain_N10_sign_1.0_0     | 1.308061 |
| mnist_plain_N10_sign_0.85_0    | 1.304132 |
| mnist_plain_uniform_0.9_0      | 1.285583 |
| mnist_plain_N10_sign_0.8_0     | 1.281375 |
| mnist_plain_sign_0.55_0        | 1.279631 |
| mnist_plain_N10_sign_0.75_0    | 1.251098 |
| mnist_plain_uniform_0.85_0     | 1.236446 |
| mnist_plain_N10_sign_0.7_0     | 1.211637 |
| mnist_plain_sign_0.5_0         | 1.199758 |
| mnist_plain_uniform_0.8_0      | 1.183725 |
| mnist_plain_N10_sign_0.65_0    | 1.164202 |
| mnist_plain_N10_uniform_1.0_0  | 1.127883 |
| mnist_plain_uniform_0.75_0     | 1.127487 |
| mnist_plain_sign_0.45_0        | 1.113119 |
| mnist_plain_N10_sign_0.6_0     | 1.111667 |
| mnist_plain_N10_uniform_0.95_0 | 1.093813 |
| mnist_plain_uniform_0.7_0      | 1.068147 |
| mnist_plain_N10_uniform_0.9_0  | 1.058364 |
| mnist_plain_N10_sign_0.55_0    | 1.054661 |
| mnist_plain_N10_uniform_0.85_0 | 1.020747 |
| mnist_plain_sign_0.4_0         | 1.017589 |
| mnist_plain_uniform_0.65_0     | 1.004439 |
| mnist_plain_N10_sign_0.5_0     | 0.991529 |
| mnist_plain_N10_uniform_0.8_0  |  0.97858 |
| mnist_plain_uniform_0.6_0      | 0.939173 |
| mnist_plain_N10_uniform_0.75_0 | 0.935292 |
| mnist_plain_N10_sign_0.45_0    |   0.9253 |
| mnist_plain_sign_0.35_0        | 0.910782 |
| mnist_plain_N10_uniform_0.7_0  | 0.889134 |
| mnist_plain_uniform_0.55_0     | 0.871178 |
| mnist_plain_N10_sign_0.4_0     |  0.85168 |
| mnist_plain_N10_uniform_0.65_0 | 0.838395 |
| mnist_plain_uniform_0.5_0      | 0.799233 |
| mnist_plain_sign_0.3_0         | 0.796521 |
| mnist_plain_N10_uniform_0.6_0  | 0.786004 |
| mnist_plain_N10_sign_0.35_0    | 0.764393 |
| mnist_plain_N10_uniform_0.55_0 | 0.731474 |
| mnist_plain_uniform_0.45_0     | 0.725564 |
| mnist_plain_N10_sign_0.3_0     | 0.674906 |
| mnist_plain_N10_uniform_0.5_0  |  0.67394 |
| mnist_plain_sign_0.25_0        | 0.673391 |
| mnist_plain_uniform_0.4_0      | 0.648826 |
| mnist_plain_N10_uniform_0.45_0 | 0.611515 |
| mnist_plain_N10_sign_0.25_0    | 0.574721 |
| mnist_plain_uniform_0.35_0     | 0.570768 |
| mnist_plain_N10_uniform_0.4_0  | 0.549806 |
| mnist_plain_sign_0.2_0         | 0.543378 |
| mnist_plain_uniform_0.3_0      | 0.490407 |
| mnist_plain_N10_uniform_0.35_0 | 0.484985 |
| mnist_plain_N10_sign_0.2_0     | 0.465586 |
| mnist_plain_N10_uniform_0.3_0  | 0.419207 |
| mnist_plain_uniform_0.25_0     | 0.408796 |
| mnist_plain_sign_0.15_0        | 0.408621 |
| mnist_plain_N10_sign_0.15_0    | 0.352042 |
| mnist_plain_N10_uniform_0.25_0 | 0.348699 |
| mnist_plain_uniform_0.2_0      | 0.327267 |
| mnist_plain_N10_uniform_0.2_0  | 0.281186 |
| mnist_plain_sign_0.1_0         | 0.270533 |
| mnist_plain_uniform_0.15_0     | 0.245405 |
| mnist_plain_N10_sign_0.1_0     | 0.234344 |
| mnist_plain_N10_uniform_0.15_0 | 0.211482 |
| mnist_plain_uniform_0.1_0      | 0.163234 |
| mnist_plain_N10_uniform_0.1_0  | 0.142437 |
| mnist_plain_sign_0.05_0        | 0.134683 |
| mnist_plain_N10_sign_0.05_0    | 0.116964 |
| mnist_plain_uniform_0.05_0     | 0.082846 |
| mnist_plain_N10_uniform_0.05_0 | 0.072677 |
| mnist_plain_uniform_0.0_0      |      0.0 |
| mnist_plain_sign_0.0_0         |      0.0 |
| mnist_plain_N10_sign_0.0_0     |      0.0 |
| mnist_plain_N10_uniform_0.0_0  |      0.0 |
|--------------------------------+----------|
|--------------------------------+----------|

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="linf" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

#+RESULTS:
|-------------------------------+----------|
| name                          |  entropy |
|-------------------------------+----------|
| mnist_linf_uniform_0.7_0      | 1.092721 |
| mnist_linf_uniform_0.65_0     | 1.082574 |
| mnist_linf_uniform_0.75_0     | 1.063361 |
| mnist_linf_uniform_0.6_0      | 1.034921 |
| mnist_linf_uniform_0.8_0      |   1.0104 |
| mnist_linf_uniform_0.85_0     | 0.947328 |
| mnist_linf_uniform_0.55_0     | 0.946202 |
| mnist_linf_N10_uniform_0.7_0  |  0.91106 |
| mnist_linf_N10_uniform_0.65_0 |   0.8995 |
| mnist_linf_N10_uniform_0.75_0 | 0.895116 |
| mnist_linf_uniform_0.9_0      | 0.881808 |
| mnist_linf_N10_uniform_0.6_0  | 0.857685 |
| mnist_linf_N10_uniform_0.8_0  | 0.854388 |
| mnist_linf_uniform_0.5_0      | 0.823718 |
| mnist_linf_uniform_0.95_0     |  0.81648 |
| mnist_linf_N10_uniform_0.85_0 |  0.80355 |
| mnist_linf_N10_uniform_0.55_0 | 0.784835 |
| mnist_linf_uniform_1.0_0      | 0.756541 |
| mnist_linf_N10_uniform_0.9_0  | 0.746028 |
| mnist_linf_N10_uniform_0.95_0 | 0.690652 |
| mnist_linf_N10_uniform_0.5_0  | 0.687755 |
| mnist_linf_uniform_0.45_0     | 0.666865 |
| mnist_linf_sign_0.45_0        | 0.663183 |
| mnist_linf_N10_uniform_1.0_0  | 0.638711 |
| mnist_linf_sign_0.5_0         | 0.610399 |
| mnist_linf_sign_0.4_0         | 0.592256 |
| mnist_linf_N10_uniform_0.45_0 |  0.55864 |
| mnist_linf_N10_sign_0.45_0    | 0.557501 |
| mnist_linf_N10_sign_0.5_0     | 0.519818 |
| mnist_linf_N10_sign_0.4_0     | 0.499481 |
| mnist_linf_uniform_0.4_0      | 0.489802 |
| mnist_linf_sign_0.35_0        | 0.460819 |
| mnist_linf_N10_uniform_0.4_0  | 0.416253 |
| mnist_linf_sign_0.55_0        | 0.404541 |
| mnist_linf_N10_sign_0.35_0    | 0.391029 |
| mnist_linf_sign_0.3_0         | 0.385047 |
| mnist_linf_sign_0.25_0        | 0.341935 |
| mnist_linf_uniform_0.35_0     | 0.340664 |
| mnist_linf_N10_sign_0.55_0    | 0.336324 |
| mnist_linf_N10_sign_0.3_0     | 0.330605 |
| mnist_linf_N10_sign_0.25_0    | 0.295048 |
| mnist_linf_sign_0.2_0         | 0.293583 |
| mnist_linf_N10_uniform_0.35_0 | 0.290741 |
| mnist_linf_sign_1.0_0         | 0.274614 |
| mnist_linf_uniform_0.3_0      | 0.269363 |
| mnist_linf_sign_0.6_0         | 0.260223 |
| mnist_linf_N10_sign_0.2_0     |  0.25522 |
| mnist_linf_sign_0.95_0        | 0.248619 |
| mnist_linf_sign_0.15_0        | 0.236345 |
| mnist_linf_uniform_0.25_0     | 0.233659 |
| mnist_linf_N10_uniform_0.3_0  | 0.232038 |
| mnist_linf_N10_sign_1.0_0     | 0.230326 |
| mnist_linf_sign_0.9_0         | 0.225451 |
| mnist_linf_N10_sign_0.6_0     | 0.210519 |
| mnist_linf_sign_0.85_0        | 0.206009 |
| mnist_linf_N10_sign_0.15_0    | 0.204673 |
| mnist_linf_N10_sign_0.95_0    | 0.203206 |
| mnist_linf_N10_uniform_0.25_0 | 0.201989 |
| mnist_linf_sign_0.65_0        | 0.199476 |
| mnist_linf_uniform_0.2_0      | 0.194724 |
| mnist_linf_sign_0.8_0         |   0.1905 |
| mnist_linf_N10_sign_0.9_0     | 0.181415 |
| mnist_linf_sign_0.75_0        | 0.179806 |
| mnist_linf_sign_0.7_0         | 0.173289 |
| mnist_linf_sign_0.1_0         | 0.170027 |
| mnist_linf_N10_uniform_0.2_0  | 0.168821 |
| mnist_linf_N10_sign_0.85_0    | 0.162437 |
| mnist_linf_N10_sign_0.65_0    | 0.157023 |
| mnist_linf_uniform_0.15_0     | 0.152562 |
| mnist_linf_N10_sign_0.8_0     | 0.148414 |
| mnist_linf_N10_sign_0.1_0     | 0.148381 |
| mnist_linf_N10_sign_0.75_0    | 0.139395 |
| mnist_linf_N10_uniform_0.15_0 | 0.133536 |
| mnist_linf_N10_sign_0.7_0     | 0.132452 |
| mnist_linf_uniform_0.1_0      | 0.106547 |
| mnist_linf_N10_uniform_0.1_0  | 0.094325 |
| mnist_linf_sign_0.05_0        | 0.092357 |
| mnist_linf_N10_sign_0.05_0    |  0.08078 |
| mnist_linf_uniform_0.05_0     |  0.05427 |
| mnist_linf_N10_uniform_0.05_0 | 0.047791 |
| mnist_linf_uniform_0.0_0      |      0.0 |
| mnist_linf_sign_0.0_0         |      0.0 |
| mnist_linf_N10_sign_0.0_0     |      0.0 |
| mnist_linf_N10_uniform_0.0_0  |      0.0 |
|-------------------------------+----------|
|-------------------------------+----------|

** L2
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="l2" :results value :return df_org
  <<init_block_random>>
  <<output_results_init>>
#+END_SRC

#+RESULTS:
|-----------------------------+----------|
| name                        |  entropy |
|-----------------------------+----------|
| mnist_l2_sign_0.75_0        | 1.120074 |
| mnist_l2_sign_0.8_0         | 1.106122 |
| mnist_l2_sign_0.7_0         | 1.077031 |
| mnist_l2_sign_0.85_0        |  1.05177 |
| mnist_l2_sign_0.65_0        | 0.983414 |
| mnist_l2_sign_0.9_0         | 0.980303 |
| mnist_l2_N10_sign_0.75_0    | 0.972572 |
| mnist_l2_N10_sign_0.8_0     | 0.961493 |
| mnist_l2_N10_sign_0.7_0     | 0.931463 |
| mnist_l2_N10_sign_0.85_0    | 0.910589 |
| mnist_l2_sign_0.95_0        | 0.908374 |
| mnist_l2_sign_0.6_0         | 0.867536 |
| mnist_l2_uniform_1.0_0      | 0.865296 |
| mnist_l2_sign_1.0_0         | 0.844497 |
| mnist_l2_N10_sign_0.65_0    |  0.84433 |
| mnist_l2_N10_sign_0.9_0     | 0.843487 |
| mnist_l2_uniform_0.95_0     | 0.819319 |
| mnist_l2_N10_sign_0.95_0    | 0.778166 |
| mnist_l2_uniform_0.9_0      | 0.775085 |
| mnist_l2_sign_0.55_0        | 0.761841 |
| mnist_l2_N10_sign_0.6_0     |  0.73648 |
| mnist_l2_uniform_0.85_0     | 0.728523 |
| mnist_l2_N10_uniform_1.0_0  | 0.725947 |
| mnist_l2_N10_sign_1.0_0     | 0.723518 |
| mnist_l2_N10_uniform_0.95_0 | 0.687935 |
| mnist_l2_sign_0.5_0         | 0.680544 |
| mnist_l2_uniform_0.8_0      | 0.676568 |
| mnist_l2_N10_uniform_0.9_0  | 0.652285 |
| mnist_l2_N10_sign_0.55_0    | 0.642593 |
| mnist_l2_uniform_0.75_0     | 0.618656 |
| mnist_l2_N10_uniform_0.85_0 | 0.611754 |
| mnist_l2_sign_0.45_0        | 0.608464 |
| mnist_l2_N10_sign_0.5_0     | 0.570054 |
| mnist_l2_N10_uniform_0.8_0  | 0.569128 |
| mnist_l2_uniform_0.7_0      | 0.556557 |
| mnist_l2_N10_uniform_0.75_0 | 0.521854 |
| mnist_l2_sign_0.4_0         | 0.516657 |
| mnist_l2_N10_sign_0.45_0    | 0.513223 |
| mnist_l2_uniform_0.65_0     | 0.493856 |
| mnist_l2_N10_uniform_0.7_0  | 0.469343 |
| mnist_l2_uniform_0.6_0      | 0.437305 |
| mnist_l2_N10_sign_0.4_0     | 0.436418 |
| mnist_l2_N10_uniform_0.65_0 | 0.418479 |
| mnist_l2_sign_0.35_0        | 0.417565 |
| mnist_l2_uniform_0.55_0     | 0.384374 |
| mnist_l2_N10_uniform_0.6_0  | 0.371473 |
| mnist_l2_N10_sign_0.35_0    | 0.354411 |
| mnist_l2_uniform_0.5_0      | 0.334696 |
| mnist_l2_sign_0.3_0         | 0.333553 |
| mnist_l2_N10_uniform_0.55_0 | 0.327543 |
| mnist_l2_uniform_0.45_0     | 0.287956 |
| mnist_l2_N10_sign_0.3_0     | 0.286729 |
| mnist_l2_N10_uniform_0.5_0  | 0.284019 |
| mnist_l2_sign_0.25_0        | 0.260332 |
| mnist_l2_N10_uniform_0.45_0 | 0.245482 |
| mnist_l2_uniform_0.4_0      | 0.244534 |
| mnist_l2_N10_sign_0.25_0    | 0.227522 |
| mnist_l2_N10_uniform_0.4_0  | 0.210342 |
| mnist_l2_uniform_0.35_0     | 0.204144 |
| mnist_l2_sign_0.2_0         | 0.193897 |
| mnist_l2_N10_uniform_0.35_0 | 0.177201 |
| mnist_l2_N10_sign_0.2_0     | 0.170994 |
| mnist_l2_uniform_0.3_0      | 0.166654 |
| mnist_l2_N10_uniform_0.3_0  | 0.145769 |
| mnist_l2_sign_0.15_0        | 0.136424 |
| mnist_l2_uniform_0.25_0     | 0.132486 |
| mnist_l2_N10_sign_0.15_0    | 0.119421 |
| mnist_l2_N10_uniform_0.25_0 | 0.115445 |
| mnist_l2_uniform_0.2_0      | 0.100992 |
| mnist_l2_N10_uniform_0.2_0  | 0.086395 |
| mnist_l2_sign_0.1_0         | 0.083555 |
| mnist_l2_N10_sign_0.1_0     |  0.07382 |
| mnist_l2_uniform_0.15_0     | 0.073031 |
| mnist_l2_N10_uniform_0.15_0 | 0.062945 |
| mnist_l2_uniform_0.1_0      | 0.047638 |
| mnist_l2_N10_uniform_0.1_0  | 0.041348 |
| mnist_l2_sign_0.05_0        | 0.040369 |
| mnist_l2_N10_sign_0.05_0    | 0.035386 |
| mnist_l2_uniform_0.05_0     | 0.023485 |
| mnist_l2_N10_uniform_0.05_0 | 0.020514 |
| mnist_l2_uniform_0.0_0      |      0.0 |
| mnist_l2_sign_0.0_0         |      0.0 |
| mnist_l2_N10_sign_0.0_0     |      0.0 |
| mnist_l2_N10_uniform_0.0_0  |      0.0 |
|-----------------------------+----------|
|-----------------------------+----------|

* L0
** Plain
#+BEGIN_SRC python :noweb yes :var norm="l0" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = [5, 8, 10, 15]
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l0" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="l0" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(5, 45, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* L1
** Plain
#+BEGIN_SRC python :noweb yes :var norm="l1" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2, 10, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l1" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(2.5, 12.5, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="l1" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(5, 20, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* L2
** Plain
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.5, 2.5, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(1.0, 3.0, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="l2" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(1.0, 3.0, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* Linf
** Plain
#+BEGIN_SRC python :noweb yes :var norm="li" :var type="plain" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.03, 0.11, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

** Linf
#+BEGIN_SRC python :noweb yes :var norm="li" :var type="linf" :results value :return df_org
  <<init_block>>
  thresholds = [0.2, 0.25, 0.3, 0.325, 0.35]
  <<output_results>>
#+END_SRC

#+RESULTS:

** L2
#+BEGIN_SRC python :noweb yes :var norm="li" :var type="l2" :results value :return df_org
  <<init_block>>
  thresholds = np.linspace(0.05, 0.25, 5)
  <<output_results>>
#+END_SRC

#+RESULTS:

* COMMENT Local Variables
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
